{"meta":{"title":"ger's world","subtitle":"","description":"","author":"Ger","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-04-25T08:19:15.000Z","updated":"2020-04-25T08:22:08.397Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-25T06:09:08.000Z","updated":"2020-04-25T06:11:13.020Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-04-27T03:15:03.000Z","updated":"2020-04-27T03:31:28.625Z","comments":true,"path":"friends/index.html","permalink":"http://yoursite.com/friends/index.html","excerpt":"","text":"友情链接： 首当其冲我的师傅"},{"title":"categories","date":"2020-04-25T05:32:02.000Z","updated":"2020-04-25T08:24:34.925Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"心得"}],"posts":[{"title":"micro bit——读写特性","slug":"micro-bit——读写特性","date":"2020-06-20T05:22:40.000Z","updated":"2020-06-20T06:07:21.038Z","comments":true,"path":"2020/06/20/micro-bit——读写特性/","link":"","permalink":"http://yoursite.com/2020/06/20/micro-bit%E2%80%94%E2%80%94%E8%AF%BB%E5%86%99%E7%89%B9%E6%80%A7/","excerpt":"","text":"一、网页读取BBC开发板名称1.代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; var connected_server; var connected&#x3D;false; var services_discovered&#x3D;false; &#x2F;&#x2F;在第5课上添加以下内容 &#x2F;&#x2F; presence of services and characteristics var has_accelerometer_service &#x3D; false; var has_accelerometer_data &#x3D; false; var has_led_service &#x3D; false; var has_led_matrix_state &#x3D; false; var has_led_text&#x3D;false &#x2F;&#x2F;新加的led_text特性相关语句 var has_device_information_service &#x3D; false; var has_model_name_string &#x3D; false; var has_temperature_service &#x3D;false; &#x2F;&#x2F;温度 var has_tem_temperature &#x3D; false; &#x2F;&#x2F; service UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE &#x3D;&#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; characteristic UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; LED_TEXT&#x3D;&#39;e95d93ee-251d-470a-a062-fa1922dfa9a8&#39; &#x2F;&#x2F;新加的led_text特性相关语句 MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEM_TEMPERATURE &#x3D;&#39;e95d9250-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; cached characteristics var accelerometer_data; var led_matrix_state; var led_text; &#x2F;&#x2F;新加的led_text特性相关语句 var model_number_string; var accelerometer_data; var tem_temperature; &#x2F;&#x2F; var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices() &#123; console.log(&quot;discoverOrdisconnectDevices&quot;); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() &#123; console.log(&quot;onDisconnected&quot;); resetUI(); &#125; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); var options &#x3D; &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] &#x2F;&#x2F;在第5节课上添加 &#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name:&#39; + device.name); console.log(&#39;&gt; Id:&#39; + device.id); console.log(&#39;&gt; Connected:&#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt; &#123; alert(&#39;ERROR&#39; +error); console.log(&#39;ERROR&#39; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected &quot; + server.connected); selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected); connected_server &#x3D;server; discoverSvcsAndChars(); &#x2F;&#x2F;在第5课基础上添加的函数 setConnectedStatus(true); &#125;, function (error) &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML &#x3D; status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered&#x3D;status; document.getElementById(&#39;status_discovered&#39;).innerHTML&#x3D;status; &#125; function resetUI() &#123; setConnectedStatus(false); &#125; function discoverSvcsAndChars() &#x2F;&#x2F;在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices() .then(services &#x3D;&gt; &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; has_temperature_service&#x3D;false; services_discovered &#x3D; 0; service_count &#x3D; services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; TEMPERATURE_SERVICE) &#x2F;&#x2F;温度 &#123; has_temperature_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; characteristics.forEach(characteristic &#x3D;&gt; &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_TEXT) &#x2F;&#x2F;新加的led_text特性相关语句 &#123; led_text &#x3D; characteristic; has_led_text &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_name_string &#x3D; true; &#125; if(characteristic.uuid &#x3D;&#x3D; TEM_TEMPERATURE) &#x2F;&#x2F;温度 &#123; tem_temperature &#x3D; characteristic; has_tem_temperature &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F;setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; function randomLEDs() &#x2F;&#x2F;第6课上添加 &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array &#x3D; [0, 0, 0, 0, 0]; &#x2F;&#x2F; Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array[0] &#x3D; Math.floor(Math.random() * 32); led_array[1] &#x3D; 1; led_array[2] &#x3D; 2; led_array[3] &#x3D; 3; led_array[4] &#x3D; 4; &#x2F;*led_array[0] &#x3D; 31; led_array[1] &#x3D; 17; led_array[2] &#x3D; 17; led_array[3] &#x3D; 17; led_array[4] &#x3D; 31; *&#x2F; var led_matrix_data &#x3D; new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; function readModelNumber() &#123; console.log(&quot;readModelNumber&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service&quot;); return; &#125; if (!has_model_name_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; &#125; model_number_string.readValue() .then(value &#x3D;&gt; &#123; data &#x3D; new Uint8Array(value.buffer); model_number_string &#x3D; new TextDecoder(&quot;utf-8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML &#x3D; model_number_string; &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt; false &lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_discovered&quot;&gt; false &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;hr&gt; &lt;h2&gt; Device Discovery or Disconnect &lt;&#x2F;h2&gt; &lt;button id &#x3D; &quot;btn_scan&quot; onclick&#x3D;&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;&#x2F;button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;&#x2F;button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_read&quot; onclick&#x3D;&quot;readModelNumber()&quot;&gt;Read Model number&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;model_number&quot;&gt;&lt;&#x2F;div&gt; &lt;hr&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 2.连接BBC板子 连接操作请移步我另一篇博文“micro bit ——设备连接”。 连接成功之后，用浏览器的方式打开以上代码的文件，打开之后如下图所示 3.网页连接BBC板子 点击“Start scan”,连接对应的BBC板子（其中这个方法我在“micro bit——设备连接”中说到过，这边就不详细介绍了），连接之后，“Connected”“Service Discovery Completed”出现“true”表示连接成功 4.读取开发板的名称 网页中有三个部分。 第一个部分“Status”是用来观察网页是否已经成功连接BBC板子，“true”表示成功连接“false”表示尚未连接成功。 第二部分“Device Discovery or Disconnect”有一个“Start scan”的按钮用来“连接”、“断开”板子的。 第三部分“Reading and Writing”分两行，第一行“Write Characteristic - Randomise Lights”用来控制开发板LED小灯的亮灭的（第二部分内容将会介绍）“Read Characteristic -Model number”用来读取开发板的名称。 点击“Read Model number”出现下面“BBC micro:bit”的字样，表示你的代码已经具备有读写的功能。 二、网页控制开发板板载LED亮灭第一部分的第四小点已经提到了“网页控制开发板LED亮灭”部分了，代码也已经被集合在上方我放的代码中去了。 点击“Randomise LEDs”,观察BBC开发板。如果上面的小灯亮灭的是受你点击“Randomise LEDs”按钮来控制的，那恭喜你了。你的网页同时也具备了控制开发板板载LED亮灭的功能。","categories":[{"name":"记录","slug":"记录","permalink":"http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"micro bit","slug":"micro-bit","permalink":"http://yoursite.com/tags/micro-bit/"}]},{"title":"micro bit——服务特性","slug":"micro-bit——服务特性","date":"2020-06-19T06:49:18.000Z","updated":"2020-06-19T12:43:23.323Z","comments":true,"path":"2020/06/19/micro-bit——服务特性/","link":"","permalink":"http://yoursite.com/2020/06/19/micro-bit%E2%80%94%E2%80%94%E6%9C%8D%E5%8A%A1%E7%89%B9%E6%80%A7/","excerpt":"一、LED服务以及任意两个服务特性1、查找uuid号“uuid”就像我们的身份证号码一样，是一个身份也是一个独一无二的代码。要想添加某个服务就要知道对应的“uuid”号。点击查询","text":"一、LED服务以及任意两个服务特性1、查找uuid号“uuid”就像我们的身份证号码一样，是一个身份也是一个独一无二的代码。要想添加某个服务就要知道对应的“uuid”号。点击查询 如上图，就可以了解到对应的“uuid”（上图只是一部分，其他部分可以自行查找）。“CTRL+F”可以精确查找你想要了解的内容。 2、连接蓝牙按照我上一篇博文里面的操作步骤，来连接蓝牙。按照上面的“uuid”就可以对应出下面那个服务是LED的服务了。 3.修改代码123456789101112131415161718192021222324var has_accelerometer_service &#x3D; false; var has_accelerometer_data &#x3D; false; var has_led_service &#x3D; false;var has_led_matrix_state &#x3D; false; var has_led_text&#x3D;false &#x2F;&#x2F;上次基础上添加的led_text特性相关语句var has_device_information_service &#x3D; false; var has_model_name_string &#x3D; false;&#x2F;&#x2F; service UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;;&#x2F;&#x2F; characteristic UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; LED_TEXT&#x3D;&#39;e95d93ee-251d-470a-a062-fa1922dfa9a8&#39; &#x2F;&#x2F;上次基础上添加的led_text特性相关语句 MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; &#x2F;&#x2F; cached characteristics var accelerometer_data; var led_matrix_state; var led_text; &#x2F;&#x2F;上次基础上添加的led_text特性相关语句 var model_number_string; var accelerometer_data; 123var options &#x3D; &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE] &#x2F;&#x2F;在第5节课上添加 &#125; 将此处的扫描设备语句中添加一个“LED_SERVICE” 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; &#x2F;&#x2F; 保存用户选择的蓝牙设备 var connected_server; &#x2F;&#x2F;在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected&#x3D;false; &#x2F;&#x2F;在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 var services_discovered &#x3D;false; &#x2F;&#x2F;在第五节课上添加 &#x2F;&#x2F;在第5课上添加以下内容 &#x2F;&#x2F; presence of services and characteristics var has_accelerometer_service &#x3D; false; var has_accelerometer_data &#x3D; false; var has_led_service &#x3D; false; var has_led_matrix_state &#x3D; false; var has_device_information_service &#x3D; false; var has_model_number_string &#x3D; false; var has_temperature_service &#x3D; false; var has_temperature &#x3D; false; &#x2F;&#x2F; service UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE &#x3D; &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; characteristic UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE&#x3D;&#39;e95d9250-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; cached characteristics var accelerometer_data; var accelerometer_data; var led_matrix_state; var model_number_string; var temperature; &#x2F;&#x2F; var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverDevicesOrDisconnect() &#x2F;&#x2F;在第四课基础上添加的函数 &#123; console.log(&quot;discoverDevicesOrDisconnect&quot;); console.log(&quot;光芒万丈小太阳&quot;) if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() &#x2F;&#x2F;在第四课基础上添加的函数 &#123; console.log(&quot;onDisconnected&quot;) resetUI(); &#125; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); &#x2F;&#x2F;consol.log 控制台打印输出 var options &#x3D; &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] &#x2F;&#x2F;在第5节课上添加 &#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) &#x2F;&#x2F;Navigator对象，包含有关游览器的信息 .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#x2F;&#x2F;在第二课基础上添加的函数 &#125;) .catch(error &#x3D;&gt;&#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected); connected_server &#x3D; server; discoverSvcsAndChars(); setConnectedStatus(true); &#125;, function(error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML&#x3D;status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered &#x3D; status; document.getElementById(&#39;status_discovered&#39;).innerHTML &#x3D; status; &#125; function resetUI() &#123; setConnectedStatus(false); setDiscoveryStatus(false); &#125; function discoverSvcsAndChars() &#x2F;&#x2F;在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices() .then(services &#x3D;&gt; &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; has_temperature_service &#x3D; false; services_discovered &#x3D; 0; service_count &#x3D; services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; TEMPERATURE_SERVICE) &#123; has_temperature_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; characteristics.forEach(characteristic &#x3D;&gt; &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_number_string &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; TEMPERATURE) &#123; temperature &#x3D; characteristic; has_temperature &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F; setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i&#x3D;0; function randomLEDs() &#x2F;&#x2F;第6课上添加 &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array &#x3D; [0, 0, 0, 0, 0]; var led_array2 &#x3D;[[12,2,12,2,12],[4,10,2,4,14],[4,12,4,4,14],[0,10,21,10,4],[10,21,17,10,4]]; &#x2F;&#x2F; Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array&#x3D;led_array2[i%5]; i++; &#x2F;*led_array[0] &#x3D; led_array2[i][1]; led_array[1] &#x3D; led_array2[i][1]; led_array[2] &#x3D; led_array2[i][2]; led_array[3] &#x3D; led_array2[i][3]; led_array[4] &#x3D; led_array2[i][4];*&#x2F; &#x2F;* led_array[0] &#x3D; 10;&#x2F;&#x2F;Math.floor(Math.random() * 32); led_array[1] &#x3D; 21; led_array[2] &#x3D; 17; led_array[3] &#x3D; 10; led_array[4] &#x3D; 4; *&#x2F; var led_matrix_data &#x3D; new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h1&gt;Web Bluetooth&lt;&#x2F;h1&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_discovered&quot;&gt;False&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;hr&gt; &lt;h2&gt;Device Discovery Or Disconnect&lt;&#x2F;h2&gt; &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevicesOrDisconnect()&quot;&gt; Discover Devices &lt;&#x2F;button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;&#x2F;button&gt; &lt;hr&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 以上是整块代码 4.测试将含有上面代码的文件用浏览器的方式打开，点击“disconnect”。”Fn+F12”出现下图内容。红色框子中就是LED的服务特性。 二、温度服务已经任意一个服务特性1、查找uuid号方法同上，就不再重复了。 2、修改micro bit板子端程序点击进入操作界面 将“蓝牙温度服务”拖到“蓝牙led服务”下面去。点击“下载”。将下载好的文件拖到板子中。会发现蓝牙中多出一个服务特性，根据“uuid”可以判断出是我们添加的温度的服务特性。 3.修改代码直接附上 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&#x2F;&#x2F; presence of services and characteristics var has_temperature_service &#x3D;false; &#x2F;&#x2F;温度var has_tem_temperature &#x3D; false; &#x2F;&#x2F; service UUIDs TEMPERATURE_SERVICE &#x3D;&#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; characteristic UUIDs TEM_TEMPERATURE &#x3D;&#39;e95d9250-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; cached characteristics var accelerometer_data; var tem_temperature; function discoverSvcsAndChars() &#x2F;&#x2F;在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices() .then(services &#x3D;&gt; &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; has_temperature_service&#x3D;false; &#x2F;&#x2F;温度 services_discovered &#x3D; 0; service_count &#x3D; services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; TEMPERATURE_SERVICE) &#x2F;&#x2F;温度 &#123; has_temperature_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; characteristics.forEach(characteristic &#x3D;&gt; &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_name_string &#x3D; true; &#125; if(characteristic.uuid &#x3D;&#x3D; TEM_TEMPERATURE) &#x2F;&#x2F;温度 &#123; tem_temperature &#x3D; characteristic; has_tem_temperature &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F;setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; 123var options &#x3D; &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] &#125; &#x2F;&#x2F;发现所有周边蓝牙设备 将此处的扫描设备语句中添加一个“TEMPERATURE_SERVICE” 4.测试将含有上面代码的文件用浏览器的方式打开，点击“disconnect”。”Fn+F12”出现下图内容。红色框子中就是温度的服务特性。","categories":[{"name":"记录","slug":"记录","permalink":"http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"micro bit","slug":"micro-bit","permalink":"http://yoursite.com/tags/micro-bit/"}]},{"title":"笑魇如花","slug":"笑魇如花","date":"2020-06-19T06:30:31.000Z","updated":"2020-06-19T06:33:41.884Z","comments":true,"path":"2020/06/19/笑魇如花/","link":"","permalink":"http://yoursite.com/2020/06/19/%E7%AC%91%E9%AD%87%E5%A6%82%E8%8A%B1/","excerpt":"","text":"","categories":[{"name":"原创","slug":"原创","permalink":"http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"}],"tags":[{"name":"原创","slug":"原创","permalink":"http://yoursite.com/tags/%E5%8E%9F%E5%88%9B/"}]},{"title":"micro bit——设备连接","slug":"micro-bit——设备连接","date":"2020-06-16T12:15:00.000Z","updated":"2020-06-19T08:45:05.039Z","comments":true,"path":"2020/06/16/micro-bit——设备连接/","link":"","permalink":"http://yoursite.com/2020/06/16/micro-bit%E2%80%94%E2%80%94%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5/","excerpt":"今天这篇博文要讲的是如何通过程序搜索连接断开蓝牙设备。分位三个板块： 1、配置环境 2、网页连接蓝牙 3、网页断开蓝牙","text":"今天这篇博文要讲的是如何通过程序搜索连接断开蓝牙设备。分位三个板块： 1、配置环境 2、网页连接蓝牙 3、网页断开蓝牙 一.配置环境先将板子连接电脑，打开电脑蓝牙。将图中“microbit-SIG-web-bluetooth-tutorial (2).hex”文件拖到板子中（再打开的时候此文件夹没有了是正常现象）。 打开浏览器，搜索“chrome://bluetooth-internals”,得到下面的页面。 点击“Devices”，再点击“Start Scan”,在蓝牙正常运行下，会扫描出很多蓝牙设备，如图所示。找到自己的蓝牙设备，连接即可（如果不知道哪个是自己的设备，可以根据“Latest RSSI”这一栏寻找数字最大的进行连接。不出意外基本都可以成功连接） 连接成功后，出现如下的图。此刻板子会显示“C”。表示成功扫描到板子并且连接成功。 二.网页连接蓝牙设备123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; &#x2F;&#x2F; 保存用户选择的蓝牙设备 var connected_server; var connected&#x3D;false; &#x2F;&#x2F;在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); var options &#x3D; &#123;acceptAllDevices:true&#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt;&#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) &#x2F;&#x2F;连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); connected_server &#x3D; server; setConnectedStatus(true); &#125;, function(error) &#x2F;&#x2F;连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML&#x3D;status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Discover Devices&quot;; &#125; &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;h2&gt;Device Discovery &lt;&#x2F;h2&gt; &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevices()&quot;&gt; Start scan &lt;&#x2F;button&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 打开此代码网页，出现下图所示页面。点击“Start scan”,配对自己的蓝牙设备，如果“Connected”显示“flase”则表示没有连接成功，显示“true”表示连接成功。 做到这边显示一切完好，证明你的程序已经具备了搜索蓝牙连接蓝牙的功能。如果想断开蓝牙设备，再次点击“Disconnect”就可以断开蓝牙设备了。 三.网页断开蓝牙设备如果想断开蓝牙设备，再次点击“Disconnect”就可以断开蓝牙设备了。便又会回到下面的界面。","categories":[{"name":"记录","slug":"记录","permalink":"http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"micro bit","slug":"micro-bit","permalink":"http://yoursite.com/tags/micro-bit/"}]},{"title":"安居乐业——域名购买及域名解析","slug":"安居乐业","date":"2020-05-23T03:50:17.000Z","updated":"2020-06-19T03:10:06.638Z","comments":true,"path":"2020/05/23/安居乐业/","link":"","permalink":"http://yoursite.com/2020/05/23/%E5%AE%89%E5%B1%85%E4%B9%90%E4%B8%9A/","excerpt":"中国房产价之所以只涨不跌就是因为中国人“喜稳定，爱安居”！中国人走到哪里都有怀乡情怀，走到哪里都能想到家乡的点点滴滴。中国人有一点就是很奇怪，离开了家乡无论走到多远，无论离开了多长时间，无论在另一个城市生活了十几年，人老了都会想回去 ，正所谓“树高千丈，叶落归根”吧！","text":"中国房产价之所以只涨不跌就是因为中国人“喜稳定，爱安居”！中国人走到哪里都有怀乡情怀，走到哪里都能想到家乡的点点滴滴。中国人有一点就是很奇怪，离开了家乡无论走到多远，无论离开了多长时间，无论在另一个城市生活了十几年，人老了都会想回去 ，正所谓“树高千丈，叶落归根”吧！ 想到贺知章的《回乡偶书》 少小离家老大回，乡音无改鬓毛衰。 儿童相见不相识，笑问客从何方来。 离别家乡岁月多，近来人事半消磨。 唯有门前镜湖水，春风不改旧时波。 博客也是同样的道理。你的博客虽然在网上有了一席之地，但终究没有给它一个安稳的家。所谓博客的家就是大家略有耳闻的域名了。下面就来详细的介绍一下如何给博客安置一个域名。 一、购买域名没钱谁会白送房子你住,是吧！ 1.登录腾讯云登录成功后点击下图红色方框“云产品”，选择“域名管理”。（域名购买有很多平台可以选择，之所以选择腾讯云，主要是腾讯云的价格公道，是我能承受的范围） 3.查询自己想要的域名 4.点击购买 付款成功后，先别高兴。得要“房产”上写了你的名字这才是你的“房子”。 二、域名解析1.解析 2.添加记录 “www”解析至云服务器。记录值为自己服务器，可以是自己电脑的IPv4地址。（如果不知道如何查看自己的ip地址，可以打开cmd，输入ipconfig,就可以查询了。） “@”解析至GitHub的仓库（图中我解析为git book，请忽略我这个操作） 3.新建CNAME文件在文件里面将自己买的域名填写进去，保存就好了。 一定不能拼错文件的名字 一定不能给文件加后缀名 一定不能写错域名的名字 这个操作很简单，但这边错了一点都不会成功。 三、配置测试输入ping +域名，当如图主机的ip地址[185.199.109.153]出来，就说明域名解析成功了。 解析的过程也是很简单的，但是着重注意细节。一个不起眼的细节就可以让你直接崩溃！ 这篇博客的宗旨就是“细节决定成败”！","categories":[{"name":"记录","slug":"记录","permalink":"http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"相由心生","slug":"相由心生","date":"2020-05-20T14:59:22.000Z","updated":"2020-06-19T06:38:44.414Z","comments":true,"path":"2020/05/20/相由心生/","link":"","permalink":"http://yoursite.com/2020/05/20/%E7%9B%B8%E7%94%B1%E5%BF%83%E7%94%9F/","excerpt":"","text":"","categories":[{"name":"原创","slug":"原创","permalink":"http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"}],"tags":[{"name":"原创","slug":"原创","permalink":"http://yoursite.com/tags/%E5%8E%9F%E5%88%9B/"}]},{"title":"斑驳陆离——让博客图文并茂","slug":"斑驳陆离","date":"2020-05-20T14:42:11.000Z","updated":"2020-06-19T05:35:43.996Z","comments":true,"path":"2020/05/20/斑驳陆离/","link":"","permalink":"http://yoursite.com/2020/05/20/%E6%96%91%E9%A9%B3%E9%99%86%E7%A6%BB/","excerpt":"在520这么神圣浪漫登记结婚最多的一天写一篇美好的但来自单身狗的自我慰藉的技术博文。 “窈窕淑女，君子好逑”","text":"在520这么神圣浪漫登记结婚最多的一天写一篇美好的但来自单身狗的自我慰藉的技术博文。 “窈窕淑女，君子好逑” “爱美之心人皆有之”，看到一个好看的小姐姐帅气的小哥哥都会忍不住想要多看几眼。当然，博客也是这样呀。你光有文字没图片，就给读者产生一种视觉疲劳，再棒的内容，再牛逼的技术，也不比图文并茂的博客来的点击率多。 下面就简单介绍一下，如何丰富自己的博客。 方案一借助七牛云平台 1.登录七牛云平台 2.点击管理控制台 3.点击对象存储 4.填写存储空间的名字&gt;存储地区&gt;访问控制为公开&gt;确定 5.点击新建好的存储空间&gt;文件管理&gt;上传文件&gt;选择想要上传的图片 6.点击上传图片的详情&gt;复制文件链接 7.打开typora软件上传图片链接（格式为“!”“[]”“()”） 8.在git环境中输入1hexo s 9.本地浏览，看到上传的图片即图片上传成功 注：七牛云上传的图片只能提供30天的存储，如果使用七牛云图床的朋友则需要30天后重新上传图片。并不建议各位朋友使用七牛云图床。下面我将介绍另一个上传图片的方法。 方案二本地上传图片 这个方法就很简单了，想必也是大多数人选择的方法了。一步搞定 首先，语法“!”“[]”“()”,在“()”中选择想要上产的图片地址，然后http://localhost:4000本地预览即大功告成。 这边说一下，其实还有第三种方法。但是第三种方法我下载的软件出了问题，效果非常不好，那我这边就不详细介绍了。如果你们前两种方法都不行的话，我这边介绍一个链接，可以参考一下。 祝你们好运！","categories":[{"name":"记录","slug":"记录","permalink":"http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"部署战略——将博客上传到网络上","slug":"部署战略","date":"2020-05-03T08:47:12.000Z","updated":"2020-06-19T05:38:29.041Z","comments":true,"path":"2020/05/03/部署战略/","link":"","permalink":"http://yoursite.com/2020/05/03/%E9%83%A8%E7%BD%B2%E6%88%98%E7%95%A5/","excerpt":"今天这篇博文所说的问题，我没有实质性的解决办法。之所以写一来是我确实在这个地方停了很久，二来我认为我有必要鼓励在此遇难的广大好友。毕竟能看到我这边博客的都是有缘人。","text":"今天这篇博文所说的问题，我没有实质性的解决办法。之所以写一来是我确实在这个地方停了很久，二来我认为我有必要鼓励在此遇难的广大好友。毕竟能看到我这边博客的都是有缘人。 首先我这篇博客主要说的是“如何将本地博客部署到网络上”。 推送俩链接 https://yangkai123.top https://xiaotaiyangzhijia.top 本人就是根据这俩链接完成。“本地博客部署到网络上”的精髓就是“坚持不懈，反复操作，科学求助”掌握上面的三点，你肯定会成功的。上面推荐的两个链接很全面，在不出意外下，这两个链接可以直接带你走上人生巅峰。不过，以本人的观察，一步登天的例子少之又少。话不多说，祝大家好运。 注：此博客只是精神食粮，请勿上升到技术层面。","categories":[{"name":"记录","slug":"记录","permalink":"http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"疫情随笔","slug":"疫情随笔","date":"2020-05-02T10:44:39.000Z","updated":"2020-06-19T05:47:05.131Z","comments":true,"path":"2020/05/02/疫情随笔/","link":"","permalink":"http://yoursite.com/2020/05/02/%E7%96%AB%E6%83%85%E9%9A%8F%E7%AC%94/","excerpt":"2020年2月，疫情入侵中国领土，搞得全国人民进入紧张的备战状态。如果这次疫情拍成纪录片，那这个纪录片的宣传语绝对是“中国速度”“中国制度”“中国共产党”“中国青年”！","text":"2020年2月，疫情入侵中国领土，搞得全国人民进入紧张的备战状态。如果这次疫情拍成纪录片，那这个纪录片的宣传语绝对是“中国速度”“中国制度”“中国共产党”“中国青年”！ 生在中国我深感荣幸，这个以前土的掉渣的国家，如今在生死关头，拼命地抓住了所有的人。都说美国保险好，多少人挣破头颅想要一个美国国籍，多少人为了得到一个外国国籍不择手段。不知道是哪来的小道消息觉得外国待遇好，难道外国人员组成都是商业精英，人文名士？去了就可以成为龙中龙，凤中凤？也许是我目光短浅，不懂里面的门道。 在网上也会看见一些关于疫情实施情况的短视频，我就感叹“为什么有些人就是愿意为了别人的生命冲在前线？”“为什么在这么绝境的环境中还能喜笑颜开？”“为什么疫情发生的第一选择就是不顾一切地拯救所有人？”疫情发生的时候我还在超市兼职，前一天还在谈论“过年超市需要增加人手”，第二天口罩就全部售完。我还在一无所知的状态下，跟着一起进入了紧急备战的氛围。后来就有了“不可外出”“不可集会”“不能走亲访友”“出门必须戴口罩”“高速被封”等消息，年前还跟朋友约好看《唐探3》，结果所有公共场所都关闭了。停公交，封路口，广播里面放勤洗手。学校一而再再而三的延迟开学，人生中第一次梦想成真就是体验了一把在床上上课的舒适。下了几次雪，油菜花开了，还没等出去跟它们合照又谢了。一年没见的朋友一次一次修改见面时间。去医院看病，所有人不管是老少男女都自觉排队，自觉配合医院的一切检查措施，没有一个人抱怨外面烈日当空。 一个国家的人民团结起来能这么强大，一个国家的人民也可以拥有同一个目标。原来，“众志成城”这般宏伟！","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"记述","slug":"记述","permalink":"http://yoursite.com/tags/%E8%AE%B0%E8%BF%B0/"}]},{"title":"漫漫长征途——博文写作","slug":"漫漫长征途","date":"2020-04-30T14:59:22.000Z","updated":"2020-06-19T05:45:42.009Z","comments":true,"path":"2020/04/30/漫漫长征途/","link":"","permalink":"http://yoursite.com/2020/04/30/%E6%BC%AB%E6%BC%AB%E9%95%BF%E5%BE%81%E9%80%94/","excerpt":"一、写作工具我这边采用的是markdown的开发工具，个人推荐本地版本typora。以下的环境都是在typora的环境中操作的。","text":"一、写作工具我这边采用的是markdown的开发工具，个人推荐本地版本typora。以下的环境都是在typora的环境中操作的。 二、新建博文在git环境中执行以下代码 1hexo new \"博文的名字\" 随后在_posts下生成“博文的名字”的文件，右击打开方式为typora。（这边有更方便的操作，自行网上查找，由于本人这边设置失败，就不介绍这个方法了，怕误人子弟。）打开成功之后便可以开始写作之旅了，markdown(一些关于markdown的语法)。 三、本地查看四步走 清除就数据 1hexo clean 2.生成新数据1hexo g ​ 3.启动hexo 服务 1hexo s ​ 4.博客浏览 ​ 访问网址http://localhost:4000/，即可查询更新的博文内容。","categories":[{"name":"记录","slug":"记录","permalink":"http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"从军行","slug":"从军行","date":"2020-04-30T14:47:10.000Z","updated":"2020-05-23T04:30:21.218Z","comments":true,"path":"2020/04/30/从军行/","link":"","permalink":"http://yoursite.com/2020/04/30/%E4%BB%8E%E5%86%9B%E8%A1%8C/","excerpt":"","text":"从军行唐 王昌龄 青海长云暗雪山，孤城遥望玉门关。 黄沙百战穿金甲，不破楼兰终不还。","categories":[{"name":"经典诗词","slug":"经典诗词","permalink":"http://yoursite.com/categories/%E7%BB%8F%E5%85%B8%E8%AF%97%E8%AF%8D/"}],"tags":[{"name":"古诗词","slug":"古诗词","permalink":"http://yoursite.com/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"}]},{"title":"雏鹰展翅——环境初步配置","slug":"雏鹰展翅","date":"2020-04-27T04:08:55.000Z","updated":"2020-06-19T05:48:32.263Z","comments":true,"path":"2020/04/27/雏鹰展翅/","link":"","permalink":"http://yoursite.com/2020/04/27/%E9%9B%8F%E9%B9%B0%E5%B1%95%E7%BF%85/","excerpt":"有很多的大神都在网上分享了自己创建博客的过程，都大同小异。创建博客的过程都是一样的，不一样的是其中遇到的问题。在我的博客中我分享我建立博客中遇到的问题以及我解决的办法，希望对大家有所帮助。","text":"有很多的大神都在网上分享了自己创建博客的过程，都大同小异。创建博客的过程都是一样的，不一样的是其中遇到的问题。在我的博客中我分享我建立博客中遇到的问题以及我解决的办法，希望对大家有所帮助。 一、配置环境在我的另一篇博文中我提到过安装环境，下面所有对博客的操作都基于node和git安装成功。（详细安装步骤请访问http://www.yangkai123.top/posts/2501011965/） 二、安装hexo在安装hexo的过成中我并没有遇到任何问题，一般这边并不会出现问题，所以这边我就不详细讲述安装的步骤。网上有很多资源可以参考。 三、本地预览记住本地预览是支持网上预览的基础，如果本地不可预览，则一定出现了问题。在此处我本地预览并没有出现任何错误。输入以下代码进行本地预览（在git环境中操作） 1hexo s 出现http://localhost:4000/字样则操作成功。如图所示 浏览页面显示如下 小伙伴们，这边可以放心大胆的做。因为这边很少出问题。所以在下就不详细的出教程了。详细过程请移步本网站友链。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"来之不易","slug":"来之不易","date":"2020-04-25T07:22:18.000Z","updated":"2020-05-03T08:14:22.043Z","comments":true,"path":"2020/04/25/来之不易/","link":"","permalink":"http://yoursite.com/2020/04/25/%E6%9D%A5%E4%B9%8B%E4%B8%8D%E6%98%93/","excerpt":"从二月份开始，建设博客一直都在断断续续的动工中。进程几乎是停滞不前，怨天尤人说“这个太难，搞不起来。”可班上也有那么多人已经将博客打造的很完美，说太多事不关己的话也没用。自己不努力，不去找资料学习，就是比别人差的原因。","text":"从二月份开始，建设博客一直都在断断续续的动工中。进程几乎是停滞不前，怨天尤人说“这个太难，搞不起来。”可班上也有那么多人已经将博客打造的很完美，说太多事不关己的话也没用。自己不努力，不去找资料学习，就是比别人差的原因。 老师说：“用博客来记录自己创建的过程”。我写写删删总觉得没有自己的风格，班上随便打开一个链接就是同样的步骤。人总是想要与众不同，就是在这样的分路下选择走哪边罢了。想要保留自己的特色想法，又不能跟老师的要求差十万八千里。又想到自己博客的建立一大半的功劳都来源于我的同桌加上我写出来的步骤也是同样中规中矩离不开大众的影子。最后决定，我的博客用来记录我创建博客过程中的心境和用来感谢博客路上帮我披荆斩棘的广大人民好友。","categories":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"初出茅庐——博客小心得","slug":"初出茅庐","date":"2020-04-25T07:14:33.000Z","updated":"2020-06-19T05:43:39.785Z","comments":true,"path":"2020/04/25/初出茅庐/","link":"","permalink":"http://yoursite.com/2020/04/25/%E5%88%9D%E5%87%BA%E8%8C%85%E5%BA%90/","excerpt":"数月以来，跟着老师的步骤过关斩将。不知道给老师累加了多少访客记录。 老师刚布置下来的时候我还真没当回事，过了好几天，同桌给我发了个信息问我git的安装包能不能下载，那时候我才开始了坐上博客的“马车”一路颠簸。","text":"数月以来，跟着老师的步骤过关斩将。不知道给老师累加了多少访客记录。 老师刚布置下来的时候我还真没当回事，过了好几天，同桌给我发了个信息问我git的安装包能不能下载，那时候我才开始了坐上博客的“马车”一路颠簸。 博客从2月26号到现在4月份，要是采访我一路过来的感受，我会对着镜头说：“取经之路，道阻且长！” 作为合格的战士“知己知彼，百战不殆”是最起码的战略。一顿猛虎操作之后，明白了大致的情况。写博客跟hexo有很大的关系。hexo是一款Node.js支持的快速、简单、强大的博客框架。（这边借鉴http://www.yangkai123.top，关于hexo的详细资料可以根据官网或者我推荐的链接自行查找）大致了解下来，着手实践了。 在配置环境的时候就出现了问题。（需安装node和git）git无论如何都安装不上去，资料也查了，办法也都试了，排除了网上能查到的所有问题还是安装不了。git卸载安装三天我做了没有十遍也有九遍，就差没把电脑拆开直接将git塞进去。无奈之际，只能找老师求助，疫情期间老师远程控制我的电脑，我蹲在电脑前面生怕错过重要的步骤，一开始老师也是按照我之前的步骤按部就班，发现没有丝毫起色之后的一顿操作看的我是不明觉厉。安装成功后，急忙问老师问题出在哪里，老师也是不清楚根本原因说了一句“可能是网的原因”就匆匆下线了，估计这次元气也是大伤了。 第一个难关算是过去了，没想到还没喘上几口气，下一步又是踩了个空。 在于之抗衡的过程中我遇到一位与我同甘共苦的密友。我们的进度甚至是遇到的困难几乎一摸一样，因此我们互相成为了对方建设博客路上亲密无间的朋友，算是博客路上遇到的知己。","categories":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}],"categories":[{"name":"记录","slug":"记录","permalink":"http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"},{"name":"原创","slug":"原创","permalink":"http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"},{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"},{"name":"经典诗词","slug":"经典诗词","permalink":"http://yoursite.com/categories/%E7%BB%8F%E5%85%B8%E8%AF%97%E8%AF%8D/"},{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/%E5%BF%83%E5%BE%97/"}],"tags":[{"name":"micro bit","slug":"micro-bit","permalink":"http://yoursite.com/tags/micro-bit/"},{"name":"原创","slug":"原创","permalink":"http://yoursite.com/tags/%E5%8E%9F%E5%88%9B/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"记述","slug":"记述","permalink":"http://yoursite.com/tags/%E8%AE%B0%E8%BF%B0/"},{"name":"古诗词","slug":"古诗词","permalink":"http://yoursite.com/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"}]}